// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sso/permissions.proto

package dutiesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DutyPermissions_CanRead_FullMethodName   = "/permissions.DutyPermissions/CanRead"
	DutyPermissions_CanCreate_FullMethodName = "/permissions.DutyPermissions/CanCreate"
	DutyPermissions_CanUpdate_FullMethodName = "/permissions.DutyPermissions/CanUpdate"
	DutyPermissions_CanDelete_FullMethodName = "/permissions.DutyPermissions/CanDelete"
)

// DutyPermissionsClient is the client API for DutyPermissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DutyPermissionsClient interface {
	CanRead(ctx context.Context, in *CanReadRequest, opts ...grpc.CallOption) (*CanReadResponse, error)
	CanCreate(ctx context.Context, in *CanCreateRequest, opts ...grpc.CallOption) (*CanCreateResponse, error)
	CanUpdate(ctx context.Context, in *CanUpdateRequest, opts ...grpc.CallOption) (*CanUpdateResponse, error)
	CanDelete(ctx context.Context, in *CanDeleteRequest, opts ...grpc.CallOption) (*CanDeleteResponse, error)
}

type dutyPermissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewDutyPermissionsClient(cc grpc.ClientConnInterface) DutyPermissionsClient {
	return &dutyPermissionsClient{cc}
}

func (c *dutyPermissionsClient) CanRead(ctx context.Context, in *CanReadRequest, opts ...grpc.CallOption) (*CanReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanReadResponse)
	err := c.cc.Invoke(ctx, DutyPermissions_CanRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dutyPermissionsClient) CanCreate(ctx context.Context, in *CanCreateRequest, opts ...grpc.CallOption) (*CanCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanCreateResponse)
	err := c.cc.Invoke(ctx, DutyPermissions_CanCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dutyPermissionsClient) CanUpdate(ctx context.Context, in *CanUpdateRequest, opts ...grpc.CallOption) (*CanUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanUpdateResponse)
	err := c.cc.Invoke(ctx, DutyPermissions_CanUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dutyPermissionsClient) CanDelete(ctx context.Context, in *CanDeleteRequest, opts ...grpc.CallOption) (*CanDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanDeleteResponse)
	err := c.cc.Invoke(ctx, DutyPermissions_CanDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DutyPermissionsServer is the server API for DutyPermissions service.
// All implementations must embed UnimplementedDutyPermissionsServer
// for forward compatibility.
type DutyPermissionsServer interface {
	CanRead(context.Context, *CanReadRequest) (*CanReadResponse, error)
	CanCreate(context.Context, *CanCreateRequest) (*CanCreateResponse, error)
	CanUpdate(context.Context, *CanUpdateRequest) (*CanUpdateResponse, error)
	CanDelete(context.Context, *CanDeleteRequest) (*CanDeleteResponse, error)
	mustEmbedUnimplementedDutyPermissionsServer()
}

// UnimplementedDutyPermissionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDutyPermissionsServer struct{}

func (UnimplementedDutyPermissionsServer) CanRead(context.Context, *CanReadRequest) (*CanReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanRead not implemented")
}
func (UnimplementedDutyPermissionsServer) CanCreate(context.Context, *CanCreateRequest) (*CanCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanCreate not implemented")
}
func (UnimplementedDutyPermissionsServer) CanUpdate(context.Context, *CanUpdateRequest) (*CanUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpdate not implemented")
}
func (UnimplementedDutyPermissionsServer) CanDelete(context.Context, *CanDeleteRequest) (*CanDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanDelete not implemented")
}
func (UnimplementedDutyPermissionsServer) mustEmbedUnimplementedDutyPermissionsServer() {}
func (UnimplementedDutyPermissionsServer) testEmbeddedByValue()                         {}

// UnsafeDutyPermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DutyPermissionsServer will
// result in compilation errors.
type UnsafeDutyPermissionsServer interface {
	mustEmbedUnimplementedDutyPermissionsServer()
}

func RegisterDutyPermissionsServer(s grpc.ServiceRegistrar, srv DutyPermissionsServer) {
	// If the following call pancis, it indicates UnimplementedDutyPermissionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DutyPermissions_ServiceDesc, srv)
}

func _DutyPermissions_CanRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DutyPermissionsServer).CanRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DutyPermissions_CanRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DutyPermissionsServer).CanRead(ctx, req.(*CanReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DutyPermissions_CanCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DutyPermissionsServer).CanCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DutyPermissions_CanCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DutyPermissionsServer).CanCreate(ctx, req.(*CanCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DutyPermissions_CanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DutyPermissionsServer).CanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DutyPermissions_CanUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DutyPermissionsServer).CanUpdate(ctx, req.(*CanUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DutyPermissions_CanDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DutyPermissionsServer).CanDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DutyPermissions_CanDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DutyPermissionsServer).CanDelete(ctx, req.(*CanDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DutyPermissions_ServiceDesc is the grpc.ServiceDesc for DutyPermissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DutyPermissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "permissions.DutyPermissions",
	HandlerType: (*DutyPermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanRead",
			Handler:    _DutyPermissions_CanRead_Handler,
		},
		{
			MethodName: "CanCreate",
			Handler:    _DutyPermissions_CanCreate_Handler,
		},
		{
			MethodName: "CanUpdate",
			Handler:    _DutyPermissions_CanUpdate_Handler,
		},
		{
			MethodName: "CanDelete",
			Handler:    _DutyPermissions_CanDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/permissions.proto",
}
